// Establish version and status
ext.githubProjectName = "Nicobar" // Change if github project name is not the same as the root project's name

buildscript {
    repositories {
        mavenCentral() // maven { url 'http://jcenter.bintray.com' }
    }
    apply from: file('gradle/buildscript.gradle'), to: buildscript 
}

status = 'release'

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    repositories { 
        mavenCentral() // maven { url: 'http://jcenter.bintray.com' }
    }
}

apply from: file('gradle/convention.gradle')
apply from: file('gradle/maven.gradle')
//apply from: file('gradle/check.gradle')
//apply from: file('gradle/license.gradle')
apply from: file('gradle/release.gradle')

subprojects {
    group = "com.netflix.${githubProjectName}" // TEMPLATE: Set to organization of project
    apply plugin: 'java'
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
    test {
        // enable TestNG support (default is JUnit)
        useTestNG()
    }  
    dependencies {
        compile     'org.slf4j:slf4j-api:1.7.0'
        compile     'com.google.code.findbugs:jsr305:2.0.2'
        compile     'com.google.code.findbugs:annotations:2.0.2'
        compile     'commons-lang:commons-lang:2.6'
        compile     'commons-io:commons-io:2.4'
        compile     'commons-collections:commons-collections:3.2.1'
        compile     'net.sf.jgrapht:jgrapht:0.8.3'
        testCompile 'org.testng:testng:6.1.1'
        testCompile 'org.mockito:mockito-core:1.10.8'
        testCompile 'org.slf4j:slf4j-simple:1.7.0'
    }

    tasks.withType(FindBugs) { 
        reports { 
            xml.enabled = false
            html.enabled = true
        }
    }
}

task copyTestClassJars(type: Copy) {
    project(':nicobar-core:nicobar-test-classes').subprojects.each { p ->
        from (p.jar.archivePath)
    }
    println project(':nicobar-core').sourceSets.test.resources.srcDirs.toArray()[0].absolutePath + "/jars"
    into (project(':nicobar-core').sourceSets.test.resources.srcDirs.toArray()[0].absolutePath + "/jars")
    rename { String fileName ->
        fileName.replace('-' + version, '')
    }
    //outputs.upToDateWhen { false }
}

project(':nicobar-core:nicobar-test-classes').subprojects.each { p ->
	copyTestClassJars.dependsOn p.jar
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}
